@page "/"
@using MediatR
@using viewmodels
@using application.Query
@using System.Timers

<div class="form-group">
    <input class="form-control" type="text" placeholder="search" @oninput="InputChanged" />
</div>

@if (PagedResult != null)
{
    foreach (var stream in PagedResult.Results)
    {
        <div class="card">
            <div class="card-title">@stream.Name</div>
            <div class="card-body">
                @stream.Description
            </div>
        </div>
    }
    <div>
        @for (int page = 1; page < (Math.Ceiling((float)PagedResult.TotalItems / PageSize) + 1); page++)
        {
            int currentPage = page;
            <button @onclick="(() => ChangePage(currentPage))">@(currentPage)</button>
        }
    </div>
}

<a href="/register-streamer">Register!</a>

@code
{
    [Inject]
    private IMediator Mediator { get; set; }
    private PagedResult<StreamViewModel> PagedResult { get; set; }

    private string Term { get; set; }
    private Timer _timer;
    public int PageSize = 3;

    protected override async Task OnInitializedAsync()
    {
        PagedResult = await Mediator.Send(new GetStreams() { PageNumber = 1, PageSize = PageSize });
    }

    protected void InputChanged(ChangeEventArgs args)
    {
        Term = (string)args.Value;

        if (_timer != null)
        {
            _timer.Enabled = false;
            _timer.Elapsed -= ExecuteSearch;
            _timer.Stop();
            _timer = null;
        }

        _timer = new Timer { Interval = 1000, AutoReset = false };
        _timer.Elapsed += ExecuteSearch;
        _timer.Start();
    }

    private void ExecuteSearch(object sender, EventArgs args)
    {
        InvokeAsync(async () =>
        {
            await DoSearch();
        });
    }

    private void ChangePage(int pageNumber)
    {
        InvokeAsync(async () =>
        {
            PagedResult = await Mediator.Send(new GetStreams { Term = Term, PageNumber = pageNumber, PageSize = PageSize });
        });
    }

    protected async Task DoSearch()
    {
        _timer.Elapsed -= ExecuteSearch;
        _timer.Enabled = false;
        _timer.Stop();
        _timer = null;

        await InvokeAsync(async () =>
        {
            PagedResult = await Mediator.Send(new GetStreams { Term = Term, PageNumber = 1, PageSize = PageSize });

            StateHasChanged();
        });
    }
}
